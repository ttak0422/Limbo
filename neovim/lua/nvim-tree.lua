-- [nfnl] Compiled from neovim/fnl/nvim-tree.fnl by https://github.com/Olical/nfnl, do not edit.
local M = require("nvim-tree")
local sort = {sorter = "name", folders_first = true, files_first = false}
local view = {cursorline = true, debounce_delay = 50, side = "left", signcolumn = "yes", width = {min = 30, max = -1, padding = 1}, float = {quit_on_focus_loss = true, enable = false}, relativenumber = false, centralize_selection = false, preserve_window_proportions = false, number = false}
local renderer = {group_empty = true, indent_width = 1, special_files = {"README.md", "LICENSE"}, symlink_destination = true, highlight_git = true, highlight_diagnostics = true, highlight_opened_files = "icon", highlight_modified = "icon", highlight_bookmarks = "icon", highlight_clipboard = "icon", indent_markers = {enable = true, icons = {corner = "\226\148\148", edge = "\226\148\130", item = "\226\148\130", bottom = "\226\148\128", none = " "}}, icons = {web_devicons = {file = {enable = true, color = false}, folder = {enable = true, color = false}}, git_placement = "before", diagnostics_placement = "signcolumn", modified_placement = "after", bookmarks_placement = "signcolumn", padding = " ", symlink_arrow = " \226\158\155 ", show = {file = true, folder = true, folder_arrow = true, git = true, modified = true, diagnostics = true, bookmarks = true}, glyphs = {default = "\239\146\165", symlink = "\239\146\129", modified = "\226\151\143", folder = {arrow_closed = "\239\145\160", arrow_open = "\239\145\188", default = "\238\151\191", open = "\238\151\190", empty = "\239\132\148", empty_open = "\239\132\149", symlink = "\239\146\130", symlink_open = "\239\146\130"}, git = {unstaged = "\226\156\151", staged = "\226\156\147", unmerged = "\238\156\167", renamed = "\226\158\156", untracked = "\226\152\133", deleted = "\239\145\152", ignored = "\226\151\140"}}}, root_folder_label = false, add_trailing = false, full_name = false}
local hijack_directories = {enable = true, auto_open = true}
local update_focused_file = {enable = true, update_root = false}
local git = {enable = true, show_on_dirs = true, show_on_open_dirs = true, disable_for_dirs = {}, timeout = 500, cygwin_support = false}
local diagnostics = {enable = true, debounce_delay = 100, show_on_open_dirs = true, severity = {min = vim.diagnostic.severity.HINT, max = vim.diagnostic.severity.ERROR}, icons = {hint = "\239\129\170", info = "\239\129\154", warning = "\239\129\177", error = "\239\129\151"}, show_on_dirs = false}
local modified = {enable = true, show_on_dirs = true, show_on_open_dirs = true}
local filters = {git_ignored = true, custom = {".DS_Store"}, exclude = {}, no_buffer = false, dotfiles = false, git_clean = false}
local live_filter = {prefix = "[FILTER]: ", always_show_folders = true}
local actions = {change_dir = {enable = true, global = false, restrict_above_cwd = false}, expand_all = {max_folder_discovery = 300, exclude = {}}, file_popup = {open_win_config = {col = 1, row = 1, relative = "cursor", border = "single", style = "minimal"}}, open_file = {eject = true, resize_window = true, window_picker = {enable = true, picker = "default", chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890", exclude = {filetype = {"notify", "packer", "qf", "diff", "fugitive", "fugitiveblame"}, buftype = {"nofile", "terminal", "help"}}}, quit_on_open = false}, remove_file = {close_window = true}}
local tab = {sync = {ignore = {}, close = false, open = false}}
local notify = {threshold = vim.log.levels.INFO, absolute_path = true}
local help = {sort_by = "key"}
local ui = {confirm = {remove = true, trash = true, default_yes = false}}
local log = {enable = false}
local on_attach
local function _1_(bufnr)
  local api = require("nvim-tree.api")
  local opt
  local function _2_(d)
    return {desc = d, buffer = bufnr, noremap = true, silent = true, nowait = true}
  end
  opt = _2_
  local keys = {{"K", api.node.show_info_popup, opt("Info")}, {"<C-s>", api.node.open.horizontal, opt("Open: Horizontal Split")}, {"]d", api.node.navigate.diagnostics.next, opt("Next Diagnostic")}, {"[e", api.node.navigate.diagnostics.prev, opt("Prev Diagnostic")}, {"<C-]>", api.tree.change_root_to_node, opt("CD")}, {"<C-e>", api.node.open.replace_tree_buffer, opt("Open: In Place")}, {"<C-r>", api.fs.rename_sub, opt("Rename: Omit Filename")}, {"<C-t>", api.node.open.tab, opt("Open: New Tab")}, {"<C-v>", api.node.open.vertical, opt("Open: Vertical Split")}, {"<BS>", api.node.navigate.parent_close, opt("Close Directory")}, {"<CR>", api.node.open.edit, opt("Open")}, {"<Tab>", api.node.open.preview, opt("Open Preview")}, {">", api.node.navigate.sibling.next, opt("Next Sibling")}, {"<", api.node.navigate.sibling.prev, opt("Previous Sibling")}, {".", api.node.run.cmd, opt("Run Command")}, {"-", api.tree.change_root_to_parent, opt("Up")}, {"a", api.fs.create, opt("Create File Or Directory")}, {"bd", api.marks.bulk.delete, opt("Delete Bookmarked")}, {"bt", api.marks.bulk.trash, opt("Trash Bookmarked")}, {"bmv", api.marks.bulk.move, opt("Move Bookmarked")}, {"B", api.tree.toggle_no_buffer_filter, opt("Toggle Filter: No Buffer")}, {"c", api.fs.copy.node, opt("Copy")}, {"C", api.tree.toggle_git_clean_filter, opt("Toggle Filter: Git Clean")}, {"[c", api.node.navigate.git.prev, opt("Prev Git")}, {"]c", api.node.navigate.git.next, opt("Next Git")}, {"d", api.fs.remove, opt("Delete")}, {"D", api.fs.trash, opt("Trash")}, {"E", api.tree.expand_all, opt("Expand All")}, {"e", api.fs.rename_basename, opt("Rename: Basename")}, {"F", api.live_filter.clear, opt("Clean Filter")}, {"f", api.live_filter.start, opt("Filter")}, {"g?", api.tree.toggle_help, opt("Help")}, {"gy", api.fs.copy.absolute_path, opt("Copy Absolute Path")}, {"H", api.tree.toggle_hidden_filter, opt("Toggle Filter: Dotfiles")}, {"I", api.tree.toggle_gitignore_filter, opt("Toggle Filter: Git Ignore")}, {"J", api.node.navigate.sibling.last, opt("Last Sibling")}, {"m", api.marks.toggle, opt("Toggle Bookmark")}, {"o", api.node.open.edit, opt("Open")}, {"O", api.node.open.no_window_picker, opt("Open: No Window Picker")}, {"p", api.fs.paste, opt("Paste")}, {"P", api.node.navigate.parent, opt("Parent Directory")}, {"q", api.tree.close, opt("Close")}, {"r", api.fs.rename, opt("Rename")}, {"R", api.tree.reload, opt("Refresh")}, {"u", api.fs.rename_full, opt("Rename: Full Path")}, {"U", api.tree.toggle_custom_filter, opt("Toggle Filter: Hidden")}, {"W", api.tree.collapse_all, opt("Collapse")}, {"x", api.fs.cut, opt("Cut")}, {"y", api.fs.copy.filename, opt("Copy Name")}, {"Y", api.fs.copy.relative_path, opt("Copy Relative Path")}, {"<2-LeftMouse>", api.node.open.edit, opt("Open")}, {"<2-RightMouse>", api.tree.change_root_to_node, opt("CD")}}
  for _, k in ipairs(keys) do
    vim.keymap.set("n", k[1], k[2], k[3])
  end
  return nil
end
on_attach = _1_
return M.setup({on_attach = on_attach, hijack_cursor = true, auto_reload_on_write = true, hijack_netrw = true, root_dirs = {}, sync_root_with_cwd = true, sort = sort, view = view, renderer = renderer, hijack_directories = hijack_directories, update_focused_file = update_focused_file, git = git, diagnostics = diagnostics, modified = modified, filters = filters, live_filter = live_filter, actions = actions, tab = tab, notify = notify, help = help, ui = ui, log = log, disable_netrw = false, hijack_unnamed_buffer_when_opening = false, prefer_startup_root = false, reload_on_bufenter = false, select_prompts = false, respect_buf_cwd = false})
